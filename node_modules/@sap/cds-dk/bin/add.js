const cds = require('../lib/cds'), { fs } = cds.utils
const DEBUG = cds.debug('add')
const { join } = require('path')

const fromDk = fs.readdirSync(join(__dirname, '../lib/init/template'))
const fromPlugins = require('../lib/init/add').registered
const conf = {}
for (const plugin of [...fromDk, ...Object.keys(Object.fromEntries(fromPlugins))]) {
  const Plugin = fromPlugins.get(plugin) ?? require(join(__dirname, '../lib/init/template', plugin))
  for (const [key, { type, help, short }] of Object.entries(new Plugin().options())) {
    conf[plugin] ??= { options: [], flags: [], help: [] }
    if (type === 'boolean')     conf[plugin].flags.push({   key: '--'+key, short: short ? '-'+short : undefined, help })
    else if (type === 'number') conf[plugin].options.push({ key: '--'+key, short: short ? '-'+short : undefined, help })
    else if (type === 'string') conf[plugin].options.push({ key: '--'+key, short: short ? '-'+short : undefined, help })
  }
}

const byShortcut = (a, b) => (b.short ? 1 : 0) - (a.short ? 1 : 0)

const options = ['--for', ...Object.values(conf).flatMap(p => p.options).sort(byShortcut).map(o => o.key)]
const shortcuts = ['-4', ...Object.values(conf).flatMap(p => p.options).sort(byShortcut).map(o => o.short)]
const flags = ['--force', ...Object.values(conf).flatMap(p => p.flags).map(o => o.key)]
DEBUG?.('cli config ', { options, shortcuts, flags })

module.exports = Object.assign(add, {
  options,
  shortcuts,
  flags,
  help: `
# SYNOPSIS

    *cds add* <feature | comma-separated list of features>

    Add one or more features to an existing project - grow as you go.

    Pick any of these:

      *hana*                  - add support for SAP HANA

      *sqlite*                - add support for SQLite

      *postgres*              - add support for PostgreSQL

      *liquibase*             - add support for Liquibase

      *xsuaa*                 - add support for authentication via XSUAA

      *multitenancy*          - add support for multitenancy

      *toggles*               - add support for feature toggles

      *extensibility*         - add support for extensibility

      *approuter*             - add support for application routing

      *local-messaging*       - add support for local messaging

      *file-based-messaging*  - add support for file-based messaging

      *enterprise-messaging*  - add support for SAP Event Mesh

      *redis-messaging*       - add support for Redis messaging

      *kibana*                - add support for Kibana formatting

      *mta*                   - add support for MTA-based deployment

      *cf-manifest*           - add support for CF-native deployment

      *helm*                  - add support for Helm-based Kyma deployment

      *html5-repo*            - add support for the HTML5 repository

      *pipeline*              - add files for CI/CD pipeline integration

      *tiny-sample*           - add minimal sample files

      *sample*                - add sample files including Fiori UI

      *data*                  - add CSV headers for modeled entities

      *typer*                 - add type generation for CDS models

      *lint*                  - add support for CDS Lint


# OPTIONS

    *--for | -4* <profile>

      Write configuration data for the given profile.

    *--force*

      Overwrite all files in case the target files already exist.


# FEATURE OPTIONS

${Object.entries(conf).sort(([a], [b]) => a.localeCompare(b)).flatMap(([pluginName, { options, flags }]) => {
  const text4 = arr => arr.map(({ key, help, short }) => help && `      ${key}${short ? ' | '+short : ''}\n\n        ${help}`).join('\n\n')
  const optionsText = text4(options), flagsText = text4(flags)
  if (!optionsText && !flagsText) return []
  return `    *cds add ${pluginName}*\n\n${optionsText}${flagsText}`
}).join('\n\n\n')}


# EXAMPLES

    *cds add* sample
    *cds add* multitenancy,hana,xsuaa --for production
    *cds add* data --data:for my.namespace.MyEntity
    *cds add* mta
    *cds add* helm


# SEE ALSO

  *cds init*

`})

async function add(args) {
  // await cds.plugins
  const CDSGenerator = require('../lib/init')
  const generator = new CDSGenerator()
  const features = args.map(f => f.split(/[,\s+]/)).flat()
  await generator.add(features)
}
