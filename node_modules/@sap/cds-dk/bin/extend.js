module.exports = Object.assign(extend, {
    options: ['--directory', '--subdomain', '--passcode', '--username', '--clientid', '--tagRule', '--defaultTag'],
    flags: ['--wsdl', '--templates', '--force', '--download-migrated-projects'],
    shortcuts: ['-d', '-s', '-p', '-u', '-c'],
    help: `
# SYNOPSIS

    *cds extend* <app-url>

    **Deprecated - for use with previous MTX Services (@sap/cds-mtx).**

    Create an extension project from an extensible SaaS app.
    Obtain the app URL from the SaaS application provider.

    To facilitate running this multiple times against the same app, refer to the
    *cds login* command.

# OPTIONS

    *-d* | *--directory* <project-extension-directory>

        Specify the target directory of your extension project. By default, the
        current working directory is used.

    *-s* | *--subdomain* <tenant-subdomain>

        Specify your tenant's subdomain. By default, it's determined from the
        app URL.

    *-p* | *--passcode* <passcode>

        Tenant-specific passcode for authentication.

    *-u* | *--username* <name>

        Deprecated. Use passcode parameter instead.

    *-c* | *--clientid* <clientid>

        Client ID for authentication. This will override the default Client ID
        from environment.

    *--force*

        Overwrite existing content. Make sure you are using a version control
        system (like git) to avoid data loss.

    *--templates*

        Download only the templates provided by the SaaS application you want to
        extend.

    *--download-migrated-projects*

        To be used only after change to @sap/cds-mtxs. Allows to download migrated extension projects.

    *--tagRule*

        Rule used to split up migrated extension projects into separate projects (please check migration documentation for more).

    *--defaultTag*

        Default tag used for migrated extension projects, default is 'migrated' (please check migration documentation for more).

# SEE ALSO

    *cds activate* to activate an extension project.

    *cds pull* to get the CDS model of a SaaS app based on current MTX Services
    (@sap/cds-mtxs).

    https://cap.cloud.sap/docs/guides/multitenancy/mtxs for information on
    @sap/cds-mtxs.

`})


async function extend ([url], options = {}) {

    if (options['download-migrated-projects']) {
        const [username, password] = options.username?.split(':') ?? [];
        delete options.user;

        await require('../lib/mtx/download_legacy').run({
            ...options,
            url,
            username,
            password
        });
        return
    }

    if (options.force) {
        if (! await require('../lib/mtx/util/question').askBooleanQuestion('Using option --force will overwrite existing files. Continue (yN)? ', false, false)) {
            console.log('Extend cancelled')
            return
        }
    }

    Object.assign(options, { url })
    await require('../lib/mtx/extend').run(options);
}


/* eslint no-console: off */
