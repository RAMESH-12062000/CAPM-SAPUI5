const { URLS } = require('../lib/init/constants')
const legacyOptions = ['--db-technology', '--insecure', '--java-package', '--modules',
    '--mta', '--odata-version', '--pipeline', '--skip-install', '--skip-sample-models',
    '--srv-memory', '--srv-technology']

module.exports = Object.assign(init, {
    options: ['--add', '--java:mvn', '--java:package', '--lint:custom', '--lint:custom:example', ...legacyOptions],
    shortcuts: [],
    flags: ['--force', '--verbose'],
    help: `
# SYNOPSIS

    *cds init* [<project>] [<options>]

    Initializes a new project in folder ./<project>, with the current
    working directory as default.

# OPTIONS

    *--add* <feature | comma-separated list of features>

        Add one or more features while creating the project.
        <feature> can be one of the following:

        *nodejs*                - creates as a Node.js-based project

        *java*                  - creates as a Java-based project

        *hana*                  - add support for SAP HANA

        *sqlite*                - add support for SQLite

        *postgres*              - add support for PostgreSQL

        *liquibase*             - add support for Liquibase

        *xsuaa*                 - add support for authentication via XSUAA

        *multitenancy*          - add support for multitenancy

        *toggles*               - add support for feature toggles

        *extensibility*         - add support for extensibility

        *approuter*             - add support for application routing

        *local-messaging*       - add support for local messaging

        *enterprise-messaging*  - add support for SAP Event Mesh

        *file-based-messaging*  - add support for file-based messaging

        *redis-messaging*       - add support for Redis messaging

        *mta*                   - add support for MTA-based deployment

        *cf-manifest*           - add support for CF-native deployment

        *helm*                  - add support for Helm-based Kyma deployment

        *html5-repo*            - add support for the HTML5 repository

        *pipeline*              - add files for CI/CD pipeline integration

        *tiny-sample*           - add minimal sample files

        *sample*                - add sample files including Fiori UI

        *data*                  - add CSV headers for modeled entities

        *typer*                 - add type generation for CDS models

        *lint*                  - add support for CDS Lint

    *--java:mvn* <Comma separated maven archetype specific parameters>

        Add the given parameters to the archetype call.
        See _${URLS.MAVEN_ARCHETYPE_HELP}_
        for parameters supported by the archetype.

    *--force*

        Overwrite all files.

# EXAMPLES

    *cds init* bookshop
    *cds init* bookshop --add java
    *cds init* bookshop --add java,hana
    *cds init* bookshop --add multitenancy,mta
    *cds init* --add java --java:mvn groupId=myGroup,artifactId=newId,package=my.company

# SEE ALSO

    *cds add* - to augment your projects later on

`})

async function init (args) {
    if (process.argv.some(a => legacyOptions.includes(a))) return _showWarningMessage()
    const CDSGenerator = require('../lib/init')
    const generator = new CDSGenerator()
    await generator.initCmd(args[0])
}


function _showWarningMessage () {

    const message = `
  ************************************************
  You are using 'cds init' with older parameters.
  To find out more about the current parameters use

    cds help init

  ************************************************
  `

    const { warn } = require('../lib/util/term');

    console.log(warn(message))
}
