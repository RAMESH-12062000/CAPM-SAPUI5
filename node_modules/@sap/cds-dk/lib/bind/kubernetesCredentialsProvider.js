const KubernetesApiAccessor = require('./KubernetesApiAccessor');

class KubernetesCredentialsProvider {
    async init() {
        this.api = new KubernetesApiAccessor();
    }

    async resolve(name, binding) {
        if (!this.initPromise) {
            this.initPromise = this.init();
        }
        await this.initPromise;


        const {context, namespace, cluster} = await this.api.context({cluster: binding.cluster, namespace: binding.namespace});
        let {name: bindingName, secret} = binding;

        let instance;
        let secretOrBindingResource = 'Secret';

        if (bindingName) {
            const bindingResource = await this.api.get({context, namespace, kind: 'servicebindings', name: bindingName});
            if (bindingResource === null) {
                // Fallback to secret instead of service binding;
                secret = bindingName;
                bindingName = undefined;
                secretOrBindingResource = 'Service Binding or Secret';
            } else {
                const { spec } = bindingResource
                if (!spec.secretName || !spec.serviceInstanceName) {
                    throw new Error('Internal error')
                }
                secret = spec.secretName;
                instance = spec.serviceInstanceName;
            }
        }

        const secretResource = await this.api.get({context, namespace, kind: 'secrets', name: secret});
        if (secretResource === null) throw new Error(`${secretOrBindingResource} '${secret}' not found.`);

        const serviceBinding = this._readBinding(name, secretResource);
        const { credentials } = serviceBinding;
        const vcap = { ...serviceBinding, credentials: undefined }

        const resolvedBinding = {
            binding: {
                type: 'k8s',
                name: bindingName,
                cluster,
                instance,
                namespace,
                secret: secret,
                resolved: true,
                vcap
            },
            credentials
        };

        return resolvedBinding;
    }

    _readBinding(name, secret) {
        const { data } = secret;
        const properties = {};
        for (const name in data) {
            const value = Buffer.from(data[name], 'base64').toString()
            properties[name] = value;
        }

        let parseBinding
        try {
            // eslint-disable-next-line
            parseBinding = require('@sap/cds/lib/env/serviceBindings').parseBinding;
        } catch (error) {
            //
        }
        if (!parseBinding) throw new Error(`Please update your @sap/cds version for Kubernetes support`)

        return parseBinding('/', name, properties);
    }
}

module.exports = new KubernetesCredentialsProvider();
