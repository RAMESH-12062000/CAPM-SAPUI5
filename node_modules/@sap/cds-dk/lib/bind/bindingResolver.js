const cds = require('../cds');
const path = require('path');
const { platformText, bindingText, logger } = require('./bindingUtil');

class BindingResolver {
    getUnresolvedBindings({ cwd = process.cwd(), env } = {}) {
        if (!env) {
            env = cds.env.for('cds', path.resolve(cwd)) // REVISIT: This might load cds.env too early!
        }
        const bindings = {}
        const requires = env.requires || {}
        for (const name in requires) {
            const service = requires[name]
            if (service && service.binding && !service.binding.resolved) {
                bindings[name] = { ...service.binding, kind: service.kind }
            }
        }
        return bindings
    }

    async resolveBindings({ bindings, cwd = process.cwd(), env, cache = {} }) {
        bindings = bindings || this.getUnresolvedBindings({ cwd, env })
        if (Object.keys(bindings).length === 0) return undefined
        logger.log(`resolving cloud service bindings...`)

        const resolvedBindings = {}

        await Promise.all(Object.keys(bindings).map(async name => {
            const binding = bindings[name]
            const cacheKey = JSON.stringify(binding)
            let resolvedBinding
            if (!cache[cacheKey]) {
                resolvedBinding = cache[cacheKey] = await this.resolveBinding(name, binding)
                logger.log(`bound ${name} to ${platformText(binding)} ${bindingText(binding)}`)
            } else {
                resolvedBinding = cache[cacheKey]
            }
            resolvedBindings[name] = resolvedBinding
        }))
        return Object.keys(resolvedBindings).length > 0 ? resolvedBindings : undefined
    }

    resolveBinding(name, binding) {
        switch (binding.type) {
            case 'cf': return require('./cfKeyProvider').resolve(name, binding)
            case 'k8s': return require('./kubernetesCredentialsProvider').resolve(name, binding)
            default: throw new Error(`Unsupported binding type "${binding.type}" for service "${name}".`)
        }
    }
}

module.exports = new BindingResolver()
