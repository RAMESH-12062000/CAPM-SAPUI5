const bindingResolver = require('./bindingResolver')
const { logger } = require('./bindingUtil')
const cds = require('../cds')
const DEBUG = cds.debug('cli') // REVISIT: This loads cds.env too early!

class BindingManager {
    constructor(options = {}) {
        this.cache = {}
        this.bindingsStr = ''
        this.options = options
        logger.log = DEBUG || !options.silent ? console.log : () => { }
    }

    getBindings() {
        const bindings = bindingResolver.getUnresolvedBindings(this.options)
        return bindings
    }

    async resolve(bindings) {
        if (!bindings) {
            bindings = this.getBindings()
            this.bindingsStr = JSON.stringify(bindings)
        }

        return await bindingResolver.resolveBindings({ ...this.options, bindings, cache: this.cache })
    }

    async bindingEnv(bindings) {
        if (!bindings) bindings = await this.resolve()
        if (bindings) {
            const VCAP_SERVICES = JSON.stringify(BindingManager.toVcapServices(bindings))
            return { VCAP_SERVICES }
        } else {
            return undefined
        }
    }

    async update({ onBeforeUpdate, onAfterUpdate } = {}) {
        const oldBindingsStr = this.bindingsStr
        const bindings = this.getBindings()
        const bindingsStr = JSON.stringify(bindings)
        this.bindingsStr = bindingsStr

        if (this.bindingsStr === oldBindingsStr) return // No change
        if (onBeforeUpdate) await onBeforeUpdate()

        try {
            if (this.pendingUpdate) await this.pendingUpdate
        } catch (error) {
            // ignore
        }
        this.pendingUpdate = undefined

        if (this.bindingsStr !== bindingsStr) return // Next update in progress

        let resolvedBindings
        try {
            this.pendingUpdate = this.resolve(bindings)
            resolvedBindings = await this.pendingUpdate
        } catch (error) {
            console.error(error.message)
            return
        }

        if (this.bindingsStr !== bindingsStr) return // Next update in progress

        const env = Object.assign({ VCAP_SERVICES: '{}' }, await this.bindingEnv(resolvedBindings));
        if (onAfterUpdate) onAfterUpdate({ bindings: resolvedBindings, env })
    }

    static toVcapServices(bindings) {
        const services = {}

        for (const name in bindings) {
            const binding = bindings[name]
            const vcap = binding.binding.vcap || {}
            const type = vcap.type || vcap.label
            const serviceEntries = services[type] = services[type] || []

            // setting the 'name' property is important to make CAP match the CDS service to the VCAP service
            // it is also added to the 'vcap' property by 'cds bind'
            serviceEntries.push({ ...vcap, name, credentials: binding.credentials })
        }

        return services
    }
}

module.exports = BindingManager
