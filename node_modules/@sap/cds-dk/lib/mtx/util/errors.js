const { getMessage } = require('./logging');

function handleHttpError(error, params, { url, command } = {}) {
    url = url ?? params.get('appUrl');
    const prefix = `Request to ${url} failed`;
    switch (error.status) {
        case 401:
            throw getMessage(`${prefix}: invalid authentication.\nRetry with valid passcode${
                params.has('passcodeUrl') ? ` from ${params.get('passcodeUrl')}` : ''
            } or username/password (required if SaaS app is configured with mocked-auth).`, { error, command });
        case 403:
            throw getMessage(prefix + ': insufficient authorization. Ensure client has all necessary roles.', { error, command });
        case 404:
            throw getMessage(prefix + ': resource not found.', { error, command });
        case 422:
            // Compilation or native-extension error.
            throw getMessage(prefix + '.', { error, command });
        default:
            // Unexpected error should be transparent to user.
            delete error.status; // Purge extra property already included in message.
            throw error;
    }
}

module.exports = {
    handleHttpError
};
