/*
 * Typings only for common use cases
 */

interface AdditionalExecOptions {
    acceptStatuses? : Array<Number> | '*',
    appendEnv?: {[key: string]: string},
    log?: object
}

interface SpawnReturns {
    status : number,
    stdout? : string,
    stderr? : string
}

import { SpawnOptions, SpawnSyncOptions, SpawnSyncReturns } from "child_process";

type execTemplate<T> = (template: TemplateStringsArray, ...args : any[]) => T;

/**
 * Execute commands with template strings asynchronously.
 *
 * @example
 *
 * await exec `ls -l .`
 * await exec `ls -l ${'spaces are safe in expressions'}` => spawn('ls', [ '-l', 'spaces are safe in expressions' ])
 * await exec `ls -l "dir ${'with spaces'}"
 * await exec `ls -l ${['db', 'srv']}`
 * const out = (await exec({stdio: ['inherit', 'pipe', 'inherit']}) `ls -l`).stdout
 * const out = await exec({result: 'stdout}) `ls -l`
 */
export function exec( template : TemplateStringsArray, ...args : any[] ) : Promise<SpawnReturns>
export function exec( options : { result: 'stdout' | 'stderr' } & SpawnOptions & AdditionalExecOptions) : execTemplate<Promise<string>>;
export function exec( options : SpawnOptions & AdditionalExecOptions) : execTemplate<Promise<SpawnReturns>>;

/**
 * Execute commands with template strings synchronously.
 *
 * @example
 *
 * execSync `ls -l .`
 * execSync `ls -l ${'spaces are safe in expressions'}` => spawn('ls', [ '-l', 'spaces are safe in expressions' ])
 * execSync `ls -l "dir ${'with spaces'}"
 * execSync `ls -l ${['db', 'srv']}`
 * const out = (execSync({stdio: ['inherit', 'pipe', 'inherit']}) `ls -l`).stdout
 * const out = execSync({result: 'stdout}) `ls -l`
 */
export function execSync( template : TemplateStringsArray, ...args : any[] ) : SpawnSyncReturns<string>;
export function execSync( options : { result: 'stdout' | 'stderr' } & SpawnSyncOptions & AdditionalExecOptions) : execTemplate<string>;
export function execSync( options : { encoding : 'buffer' | null } & SpawnOptions & AdditionalExecOptions) : execTemplate<SpawnSyncReturns<Buffer>>;
export function execSync( options : SpawnOptions & AdditionalExecOptions) : execTemplate<SpawnSyncReturns<string>>;

export { execSync as $ };