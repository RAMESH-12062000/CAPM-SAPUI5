module.exports = {
    title: "JSON schema for CDS-DK configuration",
    $schema: "https://json-schema.org/draft/2020-12/schema",
    description: "Build overlay",
    $defs: {
        cdsRoot: {
            properties: {
                // declaration for schema node for cds plugins contributing cds configuration
                schema: {
                    type: "object",
                    description: "Schema declaration for cds plugins contributing cds configuration",
                    additionalProperties: false,
                    properties: {
                        cds: {
                            type: "object",
                            description: "Containing json schema declarations for root level entries under cds node.",
                            patternProperties: {
                                // new keyword must start with word character or opening brackets
                                "^[\\[\\(\\w].*": {
                                    $ref: "https://json-schema.org/draft/2020-12/schema"
                                }
                            }
                        },

                        buildTaskType: {
                            type: "object",
                            additionalProperties: false,
                            required: ["name"],
                            properties: {
                                name: {
                                    type: "string",
                                    minLength: 1,
                                    description: "The name of the build task type."
                                },
                                description: {
                                    type: "string",
                                    description: "The description of the build task type."
                                }
                            }
                        },

                        databaseType: {
                            type: "object",
                            additionalProperties: false,
                            required: ["name"],
                            properties: {
                                name: {
                                    type: "string",
                                    minLength: 1,
                                    description: "The name of the database type."
                                },
                                description: {
                                    type: "string",
                                    description: "The description of the database type."
                                }
                            }
                        }
                    }
                },

                // build specific schema
                build: {
                    type: "object",
                    description: "Customize CDS build settings.",
                    additionalProperties: true,
                    properties: {
                        target: {
                            type: "string",
                            description: "Specify the folder which contains generated build results. Defaults to './gen'.",
                            format: "uri-reference"
                        },
                        tasks: {
                            type: "array",
                            description: "Control which tasks 'cds build' will execute on your project modules. This is a typical task configuration: '\"tasks\": [{ \"for\": \"hana\"}];",
                            uniqueItems: true,
                            default: [
                                {}
                            ],
                            items: {
                                type: "object",
                                additionalProperties: true,
                                properties: {
                                    dest: {
                                        type: "string",
                                        description: "Optional: Define the destination folder for this build task, relative to build target folder. \nFor example: Destination defined as 'custom' results in an output written to 'gen/custom'.",
                                        format: "uri-reference"
                                    },
                                    src: {
                                        type: "string",
                                        description: "Optional: Prefer defining 'cds.folders'. Use 'src' if you want it only to be valid for this specific build task, which excludes, for example, 'cds watch'.",
                                        format: "uri-reference"
                                    },
                                    for: {
                                        type: "string",
                                        description: "Define the target technology for this build task.",
                                        minLength: 1,
                                        $ref: "#/$defs/buildTaskType"
                                    },
                                    options: {
                                        type: "object",
                                        description: "Optional: Set target technology specific options for this build task.",
                                        additionalProperties: true,
                                        properties: {
                                            model: {
                                                $ref: "#/$defs/foldersStringArray"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },

                // deploy specific schema
                deploy: {
                    type: "object",
                    description: "Customize 'cds deploy' settings.",
                    additionalProperties: true,
                    properties: {
                        no_save: {
                            type: "boolean",
                            description: "Do / don't update configuration in package.json.",
                            default: true
                        }
                    }
                }
            }
        },

        buildTaskType: {
            enum: [
                "nodejs",
                "java",
                "hana",
                "mtx-sidecar",
                "mtx-extension",
                "mtx",
                "node-cf",
                "java-cf"
            ],
            enumDescriptions: [
                "Node.js build plugin",
                "Java build plugin",
                "SAP HANA build plugin",
                "MTX sidecar build plugin",
                "MTX extension build plugin",
                "MTX build plugin",
                "Node.js Cloud Foundry build plugin",
                "Java Cloud Foundry build plugin"
            ]
        },

        foldersStringArray: {
            oneOf: [
                {
                    type: "string",
                    format: "uri-reference"
                },
                {
                    type: "array",
                    uniqueItems: true,
                    items: {
                        type: "string",
                        format: "uri-reference"
                    }
                }
            ]
        }
    }
}
