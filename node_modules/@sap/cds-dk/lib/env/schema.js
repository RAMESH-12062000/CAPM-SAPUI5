
function _local(id) {
    return require.resolve(id, {
        paths: [
            process.cwd(), // project-local module is preferred
            __dirname      // otherwise from our own dependencies
        ]
    })
}

function _robustRequire(file) {
    const fs = require('fs')
    const path = require('path')

    file = path.normalize(file)
    let content
    try {
        content = fs.readFileSync(file, 'utf8')
    } catch (e) {
        // file is not readable -> nothing to do
        return
    }

    try {
        return JSON.parse(content)
    } catch (e) {
        // invalid json -> ignore and try regex
    }

    const result = {}
    try {
        const deps = JSON.parse(content.match(/"dependencies"\s*:\s*({[^}]*})/)[1])
        result.dependencies = deps
    } catch (e) { /* ignore */ }

    try {
        const devDeps = JSON.parse(content.match(/"devDependencies"\s*:\s*({[^}]*})/)[1])
        result.devDependencies = devDeps
    } catch (e) { /* ignore */ }

    return result
}

_robustRequire.resolve = function (id, options = {}) {
    const fs = require('fs')
    const path = require('path')

    try {
        return require.resolve(id, options)
    } catch (err) {
        // ignore
    }

    const [, mod, file] = /(.+)\/([^/]+)$/.exec(id)
    let modPath = path.join(process.cwd(), 'node_modules', mod, file)
    const ext = path.extname(modPath)
    if (!ext) {
        modPath = modPath + '.js'
    }
    if (fs.existsSync(modPath)) {
        return modPath
    }

    throw new Error('not found')
}

function mergePluginSchema(pluginSchema) {
    // contribution points also appear in schema file ./schemas/cds-rc.js
    return {
        into: async (targetSchema) => {
            if (pluginSchema.buildTaskType) {
                targetSchema.$defs?.buildTaskType?.enum?.push(pluginSchema.buildTaskType.name);
                targetSchema.$defs?.buildTaskType?.enumDescriptions?.push(pluginSchema.buildTaskType.description);
                targetSchema._cds_schema_overlays.push('buildTaskType')
            }

            if (pluginSchema.databaseType) {
                targetSchema.$defs?.databaseType?.enum?.push(pluginSchema.databaseType.name);
                targetSchema.$defs?.databaseType?.enumDescriptions?.push(pluginSchema.databaseType.description);
                targetSchema._cds_schema_overlays.push('databaseType')
            }

            if (pluginSchema.cds) {
                if (targetSchema.$defs?.cdsRoot?.properties) {
                    Object.assign(targetSchema.$defs.cdsRoot.properties, pluginSchema.cds)
                    targetSchema._cds_schema_overlays.push('cdsRoot')
                }

                // backwards compatibility
                if (targetSchema.properties) {
                    Object.assign(targetSchema.properties, pluginSchema.cds)
                    targetSchema._cds_schema_overlays.push('root')
                }
            }
        }
    }
}

module.exports = async function overlay4(schemaName) {
    const path = require('path')
    const { merge } = require('../init/merge')

    const cds = require('../cds')
    cds.root = process.cwd()

    const { readJSON } = require('../util/fs')

    let result;
    if (typeof cds.schema?.default4 === 'function') {
        result = await cds.schema.default4(schemaName)
    } else if (cds.env?.schemas?.[schemaName]) {
        // backwards compatibility, fails for invalid json files
        result = await readJSON(cds.env.schemas[schemaName])
    } else {
        throw new Error(`cds ${cds.version} in ${cds.root} does not support schema retrieval.`)
    }

    if (schemaName !== 'cds-rc.json') {
        return result
    }

    const oldTitle = result.title
    const oldDescription = result.description
    result._cds_schema_overlays = []

    try {
        const scheamFile = path.join(__dirname, 'schemas', schemaName.replace(/\.json$/, '.js'))
        const schema = require(scheamFile)

        await merge(schema).into(result)
        result._cds_schema_overlays.push('cdsRoot')

        if (result.properties) {
            // backwards compatibility
            await merge(schema.$defs.cdsRoot.properties).into(result.properties)
            result._cds_schema_overlays.push('root')
        }
    } catch (err) {
        console.error(err.message)
    }

    try {
        const pluginsLib = require(_local('@sap/cds/lib/plugins.js'))
        if (pluginsLib) {
            const oldRequire = pluginsLib.require
            try {
                pluginsLib.require = _robustRequire
                const plugins = pluginsLib.fetch?.()
                if (plugins) {
                    for (const [key, { impl, packageJson }] of Object.entries(plugins)) {
                        const pluginPackageJsonFile = packageJson || path.join(path.dirname(impl), 'package.json')
                        try {
                            const pluginPackageJson = require(pluginPackageJsonFile)
                            if (pluginPackageJson.cds?.schema) {
                                await mergePluginSchema(pluginPackageJson.cds.schema).into(result);
                            }
                        } catch (err) {
                            if (err.code !== 'ENOENT') {
                                console.error(`Error loading schema from plugin ${key}: ${err.message}`)
                            }
                        }
                    }
                }
            } finally {
                pluginsLib.require = oldRequire
            }
        }
    } catch (err) {
        console.error(err.message)
    }


    result.title = oldTitle
    result.description = oldDescription
    return result
}
