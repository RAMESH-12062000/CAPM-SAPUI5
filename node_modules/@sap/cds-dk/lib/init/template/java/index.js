const os = require('os')
const cds = require('../../../cds')
const { exists, copy, rimraf, fs, path } = cds.utils, { join } = path
const cmd = require('../../../util/command')
const mvn = require('../../mvn')
const term = require('../../../util/term')
const { URLS, OPTIONS: { NODEJS, JAVA }, COMMAND_ADD } = require('../../constants')

module.exports = class JavaTemplate extends require('../../plugin') {

    static hasInProduction() {
        return exists('pom.xml') || cds.cli.options?.add?.has(JAVA)
    }

    async canRun() {
        if (cds.cli.command === COMMAND_ADD) {
            throw `You can't change the runtime of an existing project.`
        }
        if (cds.cli.options.add?.has(NODEJS)) {
            throw `Only one runtime per project is supported. Specify either ${term.bold(JAVA)} or ${term.bold(NODEJS)}.`
        }
        return true
    }

    async run() {
        const { cmdLine, artifactId, archetypeVersion } = await mvn.getGenerateCmdArgs(path.basename(cds.root))
        console.log(`Using Maven archetype version ${archetypeVersion}`)

        const temp = await fs.promises.mkdtemp(join(os.tmpdir(), `${path.basename(cds.root)}_`))
        try {
            await cmd.spawnCommand('mvn', cmdLine, { cwd: temp })
            await copy(join(temp, artifactId), cds.root);
        } catch (err) {
            if (err.code === 'ENOENT' && err.path === 'mvn') {
                throw `Maven executable 'mvn' not found, follow ${term.info(URLS.MAVEN_INSTALL_HELP)} and install Maven on your machine.`
            }
            throw err;
        } finally {
            await rimraf(temp);
        }
    }

    async finalize() {
        console.log(`Learn about next steps at ${term.link(URLS.CAPIRE)}`)
    }
}
