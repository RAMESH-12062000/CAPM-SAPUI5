const { join } = require('path')
const cds = require('../../../cds')
const { read, write, copy } = cds.utils
const mvn = require('../../mvn')
const { readProject } = require('../../projectReader')
const { merge, sort, removeFromYAML } = require('../../merge')
const { copyRenderedJSON } = require('../../../util/fs')
const {
  srv4, // Server
  mtxSidecar4, // Additional Modules
  saasRegistry, serviceManager, xsuaa, // BTP Services
  srvApi4, providedMtxApiSidecar4, requiredMtxSidecarApi4 // APIs
} = require('../../registries/mta')

module.exports = class MultitenancyTemplate extends require('../../plugin') {

  static hasInProduction(env) {
    const { options } = cds.cli.options
    // REVISIT: Check if this can be simplified
    return options?.add?.has('mtx') || options?.add?.has('multitenancy') || !!env.requires?.multitenancy || false
  }

  async run() {
    const project = readProject()
    const { isNodejs, isJava, configFile } = project
    await merge(__dirname, 'files/package.json.hbs').into(configFile, { with: project })
    if (isJava) {
      const packageJson = await read('package.json')
      packageJson.workspaces = ['mtx/sidecar']
      await write('package.json', packageJson, { spaces: 2 })
      await mvn.execMvn(mvn.getAddArgs('mtx'))
    }
    if (isNodejs) await sort('package.json', 'dependencies')
    await copyRenderedJSON(join(__dirname, 'files', 'package.sidecar.json.hbs'), join('mtx', 'sidecar', 'package.json'), project)
  }

  async combine() {
    const project = readProject()
    const { isNodejs, isJava, hasMta, hasHelm, hasHelmUnifiedRuntime, hasXsuaa, hasHana, srvPath } = project

    if (hasMta) {
      const srv = srv4(srvPath)
      const mtxSidecar = mtxSidecar4(isJava ? 'mtx/sidecar' : 'gen/mtx/sidecar')
      const modules = [srv, mtxSidecar]
      const services = [saasRegistry]
      if (hasXsuaa) services.push(xsuaa)
      const apis = [srvApi4(srv), providedMtxApiSidecar4(mtxSidecar)]
      if (isJava) apis.push(requiredMtxSidecarApi4(srv))
      const additions = [...modules, ...services, ...apis]

      const overwrites = hasXsuaa ? [{ item: [xsuaa, 'parameters.config.tenant-mode'], withValue: 'shared' }] : []

      const relationships =  [{
        insert: [saasRegistry, 'name'],
        into: [isJava ? srv : mtxSidecar, 'requires', 'name']
      }]
      if (isJava) {
        relationships.push({
          insert: [srv, 'name'],
          into: [mtxSidecar, 'build-parameters.requires', 'name']
        })
      }
      if (hasXsuaa) {
        relationships.push({
          insert: [xsuaa, 'name'],
          into: [mtxSidecar, 'requires', 'name']
        })
      }
      if (hasHana) {
        relationships.push({
          insert: [serviceManager, 'name'],
          into: [mtxSidecar, 'requires', 'name'],
        })
      }

      const templateMtaPath = join(__dirname, 'files', 'mta.yaml.hbs')
      await merge(templateMtaPath).into('mta.yaml', { with: project, additions, overwrites, relationships })
    }

    if (hasHelm || hasHelmUnifiedRuntime) {
      await merge(__dirname, 'files/values.yaml.hbs').into('chart/values.yaml', { with: project })

      const envFromObject = {
        envFrom: [{
          configMapRef: {
            name: "{{ .Release.Name }}-mtxs-configmap"
          }
        }]
      }

      await merge({
        ...(isNodejs) && { sidecar: envFromObject },
        ...(isJava) && { srv: envFromObject },
        'saas-registry': {
          parametersFrom: [
            {
              secretKeyRef: {
                name: "{{ .Release.Name }}-saas-registry-secret",
                key: "parameters"
              }
            }
          ]
        }}).into('chart/values.yaml', { with: project })

        await removeFromYAML(join('chart', 'values.yaml'), ['srv.expose', 'srv.networkSecurity'])
        await copy(join(__dirname, 'files', `mtxs-configmap-${isJava ? 'java' : 'nodejs'}.yaml`)).to('chart', 'templates', 'mtxs-configmap.yaml') // REVISIT: Move to build task
      await copy(join(__dirname, 'files', 'saas-registry-secret.yaml')).to('chart', 'templates', 'saas-registry-secret.yaml') // REVISIT: Move to build task
    }

    if (hasXsuaa) {
      await merge(__dirname, 'files/xs-security.json.hbs').into('xs-security.json', {
        project,
        additions: [{
          in: 'scopes',
          where: { name: '$XSAPPNAME.mtcallback' },
        }]
      })
    }
  }
}
