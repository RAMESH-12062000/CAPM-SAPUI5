const { join } = require('path')
const cds = require('../../../cds')
const { copy } = cds.utils
const { readProject } = require('../../projectReader')
const { merge } = require('../../merge')
const { srv4, destination, html5RepoHost, html5Runtime, appContent, approuter } = require('../../registries/mta')

module.exports = class Html5RepoTemplate extends require('../../plugin') {

    requires() {
        return ['destination']
    }

    static hasInProduction(env) {
        return !!env.requires['html5-repo']
    }

    async run() {
        const project = readProject()
        const { apps, appPath, configFile } = project
        await merge(__dirname, 'files', 'package.json.hbs').into(configFile, { with: project })

        await Promise.all(apps.map(async ({app}) => {
            project.app = app
            await merge(__dirname, 'files/ui5.yaml.hbs').into(join(appPath, app, 'ui5.yaml'), { project })
        }))
        await Promise.all(apps.map(async ({app}) => {
            project.app = app
            await merge(__dirname, 'files/app-package.json.hbs').into(join(appPath, app, 'package.json'), { project })
        }))
    }

    async combine() {
        const project = readProject()
        const { srvPath, appPath, hasMta, hasHelm, hasHelmUnifiedRuntime, hasApprouter, apps } = project

        if (hasApprouter) {
            await Promise.all(apps.map(async ({app}) => {
                project.app = app
                await merge(__dirname, 'files/xs-app.json.hbs').into(join(appPath, app, 'xs-app.json'), { project })
            }))
        }

        if (hasMta) {
            const srv = srv4(srvPath)
            project.apps = apps
            const appModules = project.apps.map(app => ( {
                in: 'modules',
                where: { type: 'html5', path: `${appPath}${app.app}` }
            }))
            const additions = [srv, appContent, destination, html5RepoHost, ...appModules]
            const relationships = [{
                insert: [destination, 'name'],
                into: [appContent, 'requires', 'name'],
            }, {
                insert: [html5RepoHost, 'name'],
                into: [appContent, 'requires', 'name'],
            }]
            if (hasApprouter) {
                additions.push(approuter, html5Runtime)
                relationships.push({
                    insert: [html5Runtime, 'name'],
                    into: [approuter, 'requires', 'name'],
                })
            }
            await merge(__dirname, 'files/mta.yaml.hbs').into('mta.yaml', { with: project,
                additions,
                relationships
            })
        }

        if (hasHelm || hasHelmUnifiedRuntime) {
            await merge(__dirname, 'files/values.yaml.hbs').into('chart/values.yaml', { with: project })
            await merge({
                'html5-apps-deployer': {
                    envFrom: [{
                        configMapRef: {
                            name: '{{ .Release.Name }}-html5-apps-deployer-configmap'
                        }
                    }]
                }
            }).into('chart/values.yaml')
            await copy(join(__dirname, 'files', 'html5-apps-deployer-configmap.yaml')).to('chart', 'templates', 'html5-apps-deployer-configmap.yaml')
        }
    }
}
