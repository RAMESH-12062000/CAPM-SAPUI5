const cds = require('../../../cds')
const { read } = cds.utils
const { readProject } = require('../../projectReader')
const { merge } = require('../../merge')
const { srv4, enterpriseMessaging } = require('../../registries/mta')

module.exports = class EnterpriseMessagingSharedTemplate extends require('../../plugin') {

  options() {
    return {
      'cloudevents': {
        type: 'boolean',
        short: 'c',
        help: 'Use CloudEvents formatting',
      }
    }
  }

  async canRun() {
    const { isJava } = readProject()
    if (isJava) throw `'cds add enterprise-messaging-shared' is not available for Java yet`
    return true
  }

  static hasInProduction(env) {
    return env.requires?.messaging?.kind === 'enterprise-messaging-amqp'
  }

  async run() {
    const project = readProject()
    const { configFile, isNodejs } = project
    if (isNodejs) {
      project.shortcut = !(await read(configFile)).cds?.requires?.messaging?.kind
      project.cloudevents = cds.cli.options.cloudevents
      await merge(__dirname, 'files/package.json.hbs').into(configFile, { with: project })
    }
    await merge(__dirname, 'files/event-mesh.json.hbs').into('event-mesh.json', { project })
  }

  async combine() {
    const project = readProject()
    const { hasMta, hasHelm, hasHelmUnifiedRuntime, srvPath } = project

    if (hasMta) {
      const srv = srv4(srvPath)
      await merge(__dirname, 'files', 'mta.yaml.hbs').into('mta.yaml', {
        project,
        additions: [srv, enterpriseMessaging],
        relationships: [{
            insert: [enterpriseMessaging, 'name'],
            into: [srv, 'requires', 'name']
        }]
      })
    }

    if (hasHelm || hasHelmUnifiedRuntime) {
      await merge(__dirname, 'files/values.yaml').into('chart/values.yaml')
    }
  }
}
