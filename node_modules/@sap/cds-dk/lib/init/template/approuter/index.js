const cds = require('../../../cds')
const { exists, copy } = cds.utils
const { join } = require('path')
const { readProject } = require('../../projectReader')
const { sort, merge } = require('../../merge')
const {
    srv4, mtxSidecar4, approuter, // Modules
    xsuaa, // BTP Services
    requiredMtxApi, providedJavaApprouterApi4, providedJavaApprouterApi, // APIs
    requiredAppApi4, providedAppApi,
    approuterExtensibility // xs-app.json config
} = require('../../registries/mta')

module.exports = class ApprouterTemplate extends require('../../plugin') {

    static hasInProduction(env) {
        return exists(join(env.folders.app, 'xs-app.json')) || exists(join(env.folders.app, 'router', 'xs-app.json'))
    }

    requires() {
        return ['xsuaa']
    }

    async run() {
        const { approuterPath } = readProject()
        const appPackageJSONPath = join(approuterPath, 'package.json')
        await merge(__dirname, 'files/package.json').into(appPackageJSONPath)
        await sort(appPackageJSONPath, 'dependencies')
        await merge(__dirname, 'files/default-env.json').into(approuterPath + '/default-env.json')
    }

    async combine() {
        const project = readProject(this.options)
        const { isNodejs, isJava, hasExtensibility, hasMultitenancy, hasMta, hasHelm, hasHelmUnifiedRuntime, srvPath, approuterPath } = project

        if (hasMta) {
            const srv = srv4(srvPath)
            const apis = isJava ? [providedJavaApprouterApi4(srv), providedJavaApprouterApi] : []
            const mtxSidecar = mtxSidecar4(isJava ? 'mtx/sidecar' : 'gen/mtx/sidecar')
            if (isNodejs && hasMultitenancy) apis.push(requiredMtxApi, requiredAppApi4(mtxSidecar), providedAppApi)
            if (isJava && hasMultitenancy) apis.push(requiredMtxApi)
            const modules = [srv, approuter]
            if (hasMultitenancy) modules.push(mtxSidecar)
            const additions = [...modules, xsuaa, ...apis]
            await merge(__dirname, 'files', 'mta.yaml.hbs').into('mta.yaml', {
                with: project,
                additions,
                relationships: [{
                    insert: [xsuaa, 'name'],
                    into: [srv, 'requires', 'name']
                }, {
                    insert: [xsuaa, 'name'],
                    into: [approuter, 'requires', 'name']
                }],
            })
        }

        if (hasHelm || hasHelmUnifiedRuntime) {
            await merge(__dirname, 'files', 'values.yaml.hbs').into('chart/values.yaml', { with: project })
            await merge({ approuter: { envFrom: [{
                configMapRef: {
                    name: "{{ .Release.Name }}-approuter-configmap"
                }
            }]}}).into('chart/values.yaml', { with: project })

            const fileName = hasMultitenancy ? 'approuter-mtxs-configmap.yaml' : 'approuter-configmap.yaml'
            await copy(join(__dirname, 'files', fileName)).to('chart', 'templates', 'approuter-configmap.yaml')

            if (hasMultitenancy) {
                const mtxsConfigMapFileName = isNodejs ? 'mtxs-configmap-nodejs.yaml' : 'mtxs-configmap-java.yaml'
                await copy(join(__dirname, 'files', mtxsConfigMapFileName)).to('chart', 'templates', 'mtxs-configmap.yaml')
            }
        }

        const xsAppPath = join(approuterPath, 'xs-app.json')
        const additions = hasExtensibility ? [{ ...approuterExtensibility, at: 0 }] : []
        await merge(__dirname, 'files/xs-app.json.hbs').into(xsAppPath, { project, additions })
    }
}
