const cds = require('../../..')
const { copy, rimraf, exists, fs } = cds.utils
const { join } = require('path')
const { merge, readProject } = cds.add ?? {}

module.exports = class HelmUnifiedRuntimeTemplate extends require('../../plugin') {

  options() {
    return {
      'internal-unified-runtime-charts': {
        type: 'boolean'
      }
    }
  }

  async canRun() {
    if (cds.cli.options.force) {
        await rimraf(join('chart'))
        return true
    }
    return true
  }

  static hasInProduction() {
      const chart = exists(join('chart/Chart.yaml')) ? fs.readFileSync(join(cds.root, 'chart/Chart.yaml'), 'utf8') : ''
      return chart.includes('https://int.repositories.cloud.sap/artifactory/virtual-unified-runtime-helm-dmz') || cds.cli.options.add.has('helm-unified-runtime')
  }

  async run() {
    const project = readProject()

    await merge(__dirname, 'files/Chart.yaml.hbs').into('chart/Chart.yaml', { with: project })
    await merge(__dirname, 'files/values.yaml.hbs').into('chart/values.yaml', { with: project })

    await copy(join(__dirname, 'files', 'templates')).to('chart/templates') // REVISIT: Move to build
    await copy(join(__dirname, 'files', 'values.schema.json')).to('chart/values.schema.json') // REVISIT: Move to build (if possible)
    await copy(join(__dirname, 'files', 'values.root.schema.json')).to('chart/values.root.schema.json') // REVISIT: Move to build (if possible)

    await this._mergeDependency('web-application', 'srv')
  }

  async combine() {
    const { hasDestination, hasEnterpriseMessaging, hasHana, hasMultitenancy, hasXsuaa, hasHtml5Repo, hasApprouter, hasKafka } = readProject()

    if (hasApprouter) {
      await this._mergeDependency('web-application', 'approuter')
    }
    if (hasHtml5Repo) {
      await this._mergeDependency('service-instance', 'html5-apps-repo-host')
      await this._mergeDependency('content-deployment', 'html5-apps-deployer')
      if (hasApprouter) {
        await this._mergeDependency('service-instance', 'html5-apps-repo-runtime')
      }
    }
    if (hasMultitenancy) {
      await this._mergeDependency('web-application', 'sidecar')
      await this._mergeDependency('service-instance', 'saas-registry')
    }
    if (hasDestination) {
      await this._mergeDependency('service-instance', 'destination')
    }
    if (hasEnterpriseMessaging) {
      await this._mergeDependency('service-instance', 'event-mesh')
    }
    if (hasXsuaa) {
      await this._mergeDependency('service-instance', 'xsuaa')
    }
    if (hasKafka) {
      await this._mergeDependency('service-instance', 'kafka')
    }
    if (hasHana) {
      if (hasMultitenancy) {
        await this._mergeDependency('service-instance', 'service-manager')
      } else {
        await this._mergeDependency('service-instance', 'hana')
        await this._mergeDependency('content-deployment', 'hana-deployer')
      }
    }
  }

  async _mergeDependency(name, alias) {
    const project = readProject()
    await merge({
      dependencies: [{
          name,
          alias,
          version: '>0.0.0',
          repository: 'https://int.repositories.cloud.sap/artifactory/virtual-unified-runtime-helm-dmz'
      }]
    }).into('chart/Chart.yaml', {
      with: project,
      additions: [{
          in: 'dependencies',
          where: { alias }
      }]}
    )
  }
}
