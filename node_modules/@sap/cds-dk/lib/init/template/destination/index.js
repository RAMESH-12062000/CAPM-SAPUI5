const { readProject } = require('../../projectReader')
const { merge } = require('../../merge')
const { srv4, destination } = require('../../registries/mta')

module.exports = class DestinationTemplate extends require('../../plugin') {

    static hasInProduction(env) {
        const kinds = { odata: 1, 'odata-v2': 1, 'odata-v4': 1, rest: 1 }
        const mtxServices = { 'cds.xt.SaasProvisioningService': 1, 'cds.xt.DeploymentService': 1, 'cds.xt.ModelProviderService': 1, 'cds.xt.ExtensibilityService': 1 }
        const _fromMtx = service => service in mtxServices
        const hasDestination = Object.entries(env.requires).some(([service, require]) => !_fromMtx(service) && !kinds[service] && kinds[require.kind])
        return hasDestination || !!env.requires.destinations
    }

    async run() {
        const project = readProject()
        const { configFile } = project
        await merge(__dirname, 'files', 'package.json.hbs').into(configFile, { with: project })
    }

    async combine() {
        const project = readProject()
        const { hasHelm, hasHelmUnifiedRuntime, hasMta, srvPath } = project

        if (hasMta) {
            const srv = srv4(srvPath)
            const additions = [srv, destination]
            const relationships = [{
                insert: [destination, 'name'],
                into: [srv, 'requires', 'name']
            }]
            await merge(__dirname, 'files/mta.yaml.hbs').into('mta.yaml', { with: project, additions, relationships })
        }

        if (hasHelm || hasHelmUnifiedRuntime) {
            await merge(__dirname, 'files/values.yaml').into('chart/values.yaml')
        }
    }
}
