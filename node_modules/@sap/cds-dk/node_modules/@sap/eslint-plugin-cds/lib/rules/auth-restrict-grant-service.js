module.exports = {
  meta: {
    schema: [{/* to avoid deprecation warning for ESLint 9 */ }],
    docs: {
      description: '`@restrict.grant` on service level and for bound/unbound actions and functions is limited to grant: \'*\'',
      category: 'Model Validation',
      recommended: true
    },
    type: 'problem',
    model: 'inferred'
  },
  create (context) {
    return {
      action: checkRestrictGrant,
      function: checkRestrictGrant,
      service: checkRestrictGrant
    }

    function checkRestrictGrant (d) {
      const node = context.getNode(d)
      const file = d.$location.file
      if (d['@restrict']) {
        for (const entry of d['@restrict']) {
          if (Object.keys(entry).includes('grant')) {
            const grantValue = entry.grant
            const message = `The grant value provided in @restrict is limited to '*' for ${d.kind} '${d.name}'`
            switch (typeof grantValue) {
              case 'string':
                if (grantValue !== '*') {
                  context.report({
                    message,
                    node,
                    file
                  })
                }
                break
              case 'object':
                if (grantValue.length > 1 || grantValue[0] !== '*') {
                  context.report({
                    message,
                    node,
                    file
                  })
                }
                break
            }
          }
        }
      }
    }
  }
}
