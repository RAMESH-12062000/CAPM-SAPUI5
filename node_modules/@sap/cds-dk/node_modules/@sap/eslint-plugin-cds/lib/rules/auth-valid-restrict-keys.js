const { isEmptyObject, findFuzzy } = require('../utils/rules')

const VALID_RESTRICT_KEYS = ['grant', 'to', 'where']

module.exports = {
  meta: {
    schema: [{/* to avoid deprecation warning for ESLint 9 */}],
    docs: {
      description: '`@restrict` must have properly spelled `to`, `grant`, and `where` keys.',
      category: 'Model Validation',
      recommended: true
    },
    messages: {
      InvalidItem: "Misspelled key '{{invalid}}'. Did you mean '{{candidates}}'?"
    },
    type: 'problem',
    model: 'inferred'
  },
  create (context) {
    return {
      entity: checkRestrictKeys
    }

    function checkRestrictKeys (e) {
      if (e['@restrict']) {
        for (const entry of e['@restrict']) {
          if (typeof entry === 'object' && !isEmptyObject(entry)) {
            for (const key of Object.keys(entry)) {
              if (!VALID_RESTRICT_KEYS.includes(key)) {
                const candidates = findFuzzy(key, VALID_RESTRICT_KEYS.sort())
                context.report({
                  messageId: 'InvalidItem',
                  data: { invalid: key, candidates },
                  node: context.getNode(e),
                  file: e.$location.file
                })
              }
            }
          }
        }
      }
    }
  }
}
