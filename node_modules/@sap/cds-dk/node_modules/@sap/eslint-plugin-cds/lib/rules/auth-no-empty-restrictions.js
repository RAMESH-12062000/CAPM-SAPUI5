const LABELS = ['@restrict', '@requires']

module.exports = {
  meta: {
    schema: [{/* to avoid deprecation warning for ESLint 9 */}],
    docs: {
      description: '`@restrict` and `@requires` must not be empty.',
      category: 'Model Validation',
      recommended: true
    },
    hasSuggestions: true,
    messages: {
      InvalidItem: "Invalid item '{{invalid}}'. Did you mean '{{candidates}}'?",
      ReplaceItemWith: "Replace '{{invalid}}' with '{{candidates}}'"
    },
    type: 'problem',
    model: 'inferred'
  },
  create (context) {
    return {
      entity: checkRestrictions,
      service: checkRestrictions
    }

    function checkRestrictions (e) {
      for (const l of LABELS) {
        const invalid = (typeof e[l] === 'object' && e[l].length === 0) || (typeof e[l] === 'string' && e[l] === '')
        if (invalid) {
          context.report({
            message: `No explicit restrictions provided on ${e.kind} \`${e.name}\` at \`${l}\`.`,
            node: context.getNode(e),
            file: e.$location.file
          })
        }
      }
    }
  }
}
