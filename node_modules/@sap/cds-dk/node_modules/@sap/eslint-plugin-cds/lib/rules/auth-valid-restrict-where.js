const cds = require('@sap/cds')

module.exports = {
  meta: {
    schema: [{/* to avoid deprecation warning for ESLint 9 */}],
    docs: {
      description: '`@restrict.where` must have valid values.',
      category: 'Model Validation',
      recommended: true
    },
    severity: 'error',
    hasSuggestions: true,
    messages: {
      InvalidItem: "Invalid item '{{invalid}}'. Did you mean '{{candidates}}'?",
      ReplaceItemWith: "Replace '{{invalid}}' with '{{candidates}}'"
    },
    type: 'problem',
    model: 'inferred'
  },
  create (context) {
    const model = context.getModel()

    return {
      entity: checkRestrictGrant
    }

    function checkRestrictGrant (e) {
      const USER_ROLES = []

      model.foreach('entity', (e) => {
        if (e['@restrict']) {
          e['@restrict'].forEach((p) => {
            if (p.to) {
              switch (typeof p.to) {
                case 'string':
                  if (p.to !== p.to.toLowerCase() && !USER_ROLES.includes(p.to)) {
                    USER_ROLES.push(p.to)
                  }
                  break
                case 'object':
                  for (const r in p.to) {
                    if (r !== r.toLowerCase() && !USER_ROLES.includes(r)) {
                      USER_ROLES.push(r)
                    }
                  }
              }
            }
          })
        }
      })

      if (e['@restrict']) {
        const node = context.getNode(e)
        const file = e.$location.file
        for (const entry of e['@restrict']) {
          const whereValues = entry.where
          if (whereValues && typeof whereValues === 'string') {
            try {
              cds.parse.expr(entry.where)
            } catch (err) {
              context.report({
                message: 'Invalid `where` expression, CDS compilation failed.',
                node,
                file
              })
            }
          }
        }
      }
    }
  }
}
