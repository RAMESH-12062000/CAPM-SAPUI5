const { findFuzzy, isEmptyString, isEmptyObject, isStringInArray } = require('../utils/rules')

const REPLACE_AS_WRITE_EVENTS = ['READ', 'CREATE', 'UPDATE', 'DELETE']
const VALID_EVENTS = REPLACE_AS_WRITE_EVENTS.concat(['INSERT', 'UPSERT', 'WRITE', '*'])

module.exports = {
  meta: {
    schema: [{/* to avoid deprecation warning for ESLint 9 */}],
    docs: {
      description: '`@restrict.grant` must have valid values.',
      category: 'Model Validation',
      recommended: true
    },
    messages: {
      InvalidItem: "Invalid item '{{invalid}}'. Did you mean '{{candidates}}'?",
      ReplaceItemWith: "Replace '{{invalid}}' with '{{candidates}}'"
    },
    type: 'problem',
    model: 'inferred'
  },
  create (context) {
    return {
      entity: checkRestrictGrant
    }

    function checkRestrictGrant (e) {
      const node = context.getNode(e)
      const file = e.$location.file
      if (e['@restrict']) {
        const actions = e.actions
        const actionNames = actions ? Object.keys(actions).map((s) => actions[s].name) : []
        const validEventsAndActions = VALID_EVENTS.concat(actionNames)

        for (const entry of e['@restrict']) {
          if (Object.keys(entry).includes('grant')) {
            const grantValue = entry.grant
            switch (typeof grantValue) {
              case 'string': {
                if (isEmptyString(grantValue)) {
                  context.report({
                    message: `Missing event/action on ${e.name} for \`@restrict.grant\`.`,
                    node,
                    file
                  })
                } else {
                  if (!isStringInArray(grantValue, validEventsAndActions, true)) {
                    const candidates = findFuzzy(grantValue, validEventsAndActions.sort())
                    context.report({
                      messageId: 'InvalidItem',
                      data: { invalid: grantValue, candidates },
                      node,
                      file
                    })
                  }
                }
                break
              }

              case 'object':
                if (isEmptyObject(grantValue)) {
                  context.report({
                    message: `Missing event/action on ${e.name} for \`@restrict.grant\`.`,
                    node,
                    file
                  })
                } else {
                  const valuesForWrite = grantValue.filter(function (item) {
                    return item !== 'READ' && item !== 'WRITE' && item !== '*'
                  })
                  for (const value of grantValue) {
                    if (!validEventsAndActions.includes(value)) {
                      const candidates = findFuzzy(value, validEventsAndActions.sort())
                      context.report({
                        messageId: 'InvalidItem',
                        data: { invalid: value, candidates },
                        node,
                        file
                      })
                    }
                  }
                  // If values do not contain 'READ, WRITE, *', 'WRITE' only is enough
                  const allValuesIncluded = grantValue.every((v) => valuesForWrite.includes(v))
                  if (allValuesIncluded) {
                    context.report({
                      messageId: 'InvalidItem',
                      data: { invalid: [`[${grantValue}]`], candidates: ['["WRITE"]'] },
                      node,
                      file
                    })
                  }
                  // If values contain '*', '*' only is enough
                  if (grantValue.length > 1 && grantValue.includes('*')) {
                    context.report({
                      messageId: 'InvalidItem',
                      data: { invalid: `[${grantValue}]`, candidates: ['["*"]'] },
                      node,
                      file
                    })
                  }
                }
                break
            }
          }
        }
      }
    }
  }
}
