module.exports = {
  meta: {
    schema: [{/* to avoid deprecation warning for ESLint 9 */}],
    docs: {
      description: 'Regular element names should start with lowercase letters.'
    },
    type: 'suggestion',
    hasSuggestions: true,
    messages: {
      startLowercase: "Element name '{{entityName}}.{{elementName}}' should start with a lowercase letter.",
      fixLowercase: 'Start element name with a lowercase letter.'
    },
    fixable: 'code'
  },
  create: function (context) {
    const sourcecode = context.getSourceCode()

    return {
      element: checkStartLowercase
    }

    function checkStartLowercase (e) {
      const elementName = e.name
      const entityName = e.parent.name
      if (elementName && !(entityName.startsWith('localized') || entityName.endsWith('texts'))) {
        if (elementName.charAt(0) !== elementName.charAt(0).toLowerCase() && !['ID'].includes(elementName)) {
          if (e.$location && e.$location.file) {
            const file = e.$location.file
            const loc = context.getLocation(elementName, e)
            const fix = (fixer, source = sourcecode) => {
              const elementNameSanitized = elementName.charAt(0).toLowerCase() + elementName.slice(1)
              const rangeEnd = source.getIndexFromLoc({
                line: loc.end.line,
                column: loc.end.column
              })
              const rangeBeg = rangeEnd ? rangeEnd - elementNameSanitized.length : 0
              return fixer.replaceTextRange([rangeBeg, rangeEnd], elementNameSanitized)
            }
            context.report({
              messageId: 'startLowercase',
              loc,
              file,
              data: {
                entityName,
                elementName
              },
              suggest: [
                {
                  messageId: 'fixLowercase',
                  fix
                }
              ]
            })
          }
        }
      }
    }
  }
}
