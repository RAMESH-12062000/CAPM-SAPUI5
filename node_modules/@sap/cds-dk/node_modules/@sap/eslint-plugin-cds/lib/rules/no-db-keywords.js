const { dirname } = require('path')

const cds = require('@sap/cds')

module.exports = {
  meta: {
    schema: [{/* to avoid deprecation warning for ESLint 9 */}],
    docs: {
      description: 'Avoid using reserved SQL keywords.',
      recommended: true
    },
    type: 'problem',
    model: 'inferred'
  },
  create (context) {
    let dir = context.getFilename()
    dir = dirname(dir)
    const { requires } = cds.env.for('cds', dir)
    if (requires.db?.kind !== 'sqlite') return

    return {
      // > return standard eslint visitor callbacks registered to CSN kinds, types, ...
      entity: checkNameIsNotReserved,
      element: checkNameIsNotReserved
    }

    function checkNameIsNotReserved (d) {
      if (RESERVED.includes(d.name.toUpperCase())) {
        // Do not blame in case of external services
        const srv = d._service || (d.parent && d.parent._service)
        if (srv && srv['@cds.external']) return
        if (d.kind === 'entity' && d['@cds.persistence.skip'] === true) return
        context.report({
          message: `'${d.name}' is a reserved keyword in SQLite`,
          node: context.getNode(d),
          file: d.$location.file
        })
      }
    }
  }
}

// REVISIT: Replace by compiler-provided check
const RESERVED = cds.compile.to.sql.sqlite ? cds.compile.to.sql.sqlite.keywords : ['ORDER', 'GROUP', 'LIMIT']
