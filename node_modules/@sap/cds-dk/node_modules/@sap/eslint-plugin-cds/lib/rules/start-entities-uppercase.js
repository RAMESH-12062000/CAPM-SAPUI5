const { splitDefName } = require('../utils/rules')

module.exports = {
  meta: {
    schema: [{/* to avoid deprecation warning for ESLint 9 */}],
    docs: {
      description: 'Regular entity names should start with uppercase letters.'
    },
    type: 'suggestion',
    hasSuggestions: true,
    messages: {
      startUppercase: "Entity name '{{entityName}}' should start with an uppercase letter.",
      fixUppercase: 'Start entity name with an uppercase letter.'
    },
    fixable: 'code'
  },
  create: function (context) {
    const sourcecode = context.getSourceCode()

    return { entity: checkStartsUppercase }

    function checkStartsUppercase (e) {
      const entityName = splitDefName(e).name
      if (entityName.charAt(0) !== entityName.charAt(0).toUpperCase()) {
        if (e.$location && e.$location.file) {
          const file = e.$location.file
          const loc = context.getLocation(entityName, e)
          const fix = (fixer) => {
            const entityNameSanitized = entityName.charAt(0).toUpperCase() + entityName.slice(1)
            const rangeEnd = sourcecode.getIndexFromLoc({
              line: loc.end.line,
              column: loc.end.column
            })
            const rangeBeg = rangeEnd ? rangeEnd - entityNameSanitized.length : 0
            return fixer.replaceTextRange([rangeBeg, rangeEnd], entityNameSanitized)
          }
          context.report({
            messageId: 'startUppercase',
            loc,
            file,
            data: { entityName },
            suggest: [
              {
                messageId: 'fixUppercase',
                fix
              }
            ]
          })
        }
      }
    }
  }
}
