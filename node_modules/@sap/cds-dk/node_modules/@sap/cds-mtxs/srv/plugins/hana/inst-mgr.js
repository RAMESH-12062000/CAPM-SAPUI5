module.exports = new class InstanceManager {
  async create (t, _) { return (await _im()).create(t, _) }
  async delete (t)    { try { return await (await _im()).delete(t) } catch (e) { if (e.statusCode !== 404) throw e } }
  async get    (t)    { return (await _im()).get(t) }
  async acquire(t, _) { return await (await _im()).get(t) ?? (await _im()).create(t, _) }
  async getAll ()     { return (await _im()).getAll() }
  get   deploy ()     { return super.deploy = require('./hdi').deploy } //> tunnelling this to provide a simpler API to users
}

function _imClientParams(requires) {
  return requires['cds.xt.DeploymentService']?.hdi?.client || {}
}

async function _im (_conf) {
  if (_im.promised) return _im.promised
  const { promisify } = require('util')
  const createInstanceManager = promisify(require('@sap/instance-manager').create)
  const requires = require('@sap/cds/lib').env.requires
  const conf = _conf || requires.db.credentials
  const im = await (_im.promised = createInstanceManager({ ...conf, ..._imClientParams(requires),
    polling_interval_millis: 3000, // Avoid rate-limiting problems with service-manager
    cache_max_items: 1, // Caching has no cross application instance support
    cache_item_expire_seconds: 1
  }))
  im.create = promisify(im.create, im)
  im.delete = promisify(im.delete, im)
  im.get = promisify(im.get, im)
  im.getAll = promisify(im.getAll, im)
  return im
}
