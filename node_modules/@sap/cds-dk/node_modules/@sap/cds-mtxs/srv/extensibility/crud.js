const cds = require('@sap/cds/lib')
const { set_ } = require('./add')

const TOMBSTONE_ID = '__tombstone'

const readExtension = async function (req) {
  const tenant = _tenant(req)
  if (tenant) cds.context = { tenant } // req.data.tenant from header if exists

  const ext = !req.data?.ID ? await SELECT.from('cds.xt.Extensions') : await SELECT.one.from('cds.xt.Extensions').where({ tag: req.data.ID })
  if (Array.isArray(ext)) return ext.filter(item => item.tag !== TOMBSTONE_ID).map(item => ({ ID: item.tag, csn: item.csn, i18n: item.i18n !== '{}' ? item.i18n : undefined,  timestamp: item.timestamp }))
  if (ext) return { ID: ext.tag, csn: ext.csn, i18n: ext.i18n !== '{}' ? ext.i18n : undefined, timestamp: ext.timestamp }
  return ext
}

const updateExtension = async function (req) {
  const tenant = _tenant(req)
  // set handles the tenant switch in that case
  await set_(req, { extension: [...req.data.csn], resources: req.data.i18n, tag: req.data.ID, tenant: tenant ?? req.tenant })
  const res = await SELECT.one.from('cds.xt.Extensions').where({ tag: req.data.ID })
  return { ID: res.tag, csn: res.csn, i18n: res.i18n !== '{}' ? res.i18n : undefined, timestamp: res.timestamp }
}

const deleteExtension = async function (req) {
  const tenant = _tenant(req)
  if (tenant) cds.context = { tenant } // req.data.tenant from header if exists

  const result = !req.data?.ID ? await DELETE.from('cds.xt.Extensions') : await DELETE.from('cds.xt.Extensions').where({ tag: req.data.ID })

  // leave tombstone for deployment - ID cannot be used in case of all extensions (no ID passed)
  await set_(req, { extension: ['{}'], tag: TOMBSTONE_ID, tenant: tenant ?? req.tenant })

  return result
}

function _tenant(req) {
  const tenant = req.headers['x-tenant-id']
  if (!req.user.is('internal-user') && tenant && tenant !== req.tenant)
    req.reject(403, `No permission to promote extensions by tenants other than ${req.tenant}`)
  return tenant
}

module.exports = { readExtension, updateExtension, deleteExtension }
