const cds = require('@sap/cds/lib')
const LOG = cds.log('mtx')

const { getCompilerError } = require('../../lib/utils')
const handleDefaults = require('./defaults')
const activateExt = require('./activate')

const _isCSN = str => str.substring(0, 1) === '{'

const _validateInput = function (req, extension) {
  if (!req.user.is('internal-user') && req.data.tenant && req.data.tenant !== req.tenant)
    req.reject(403, `No permission to add extensions to tenants other than ${req.tenant}`)

  if (!extension) req.reject(400, 'Property "extension" is missing')

  if (Array.isArray(extension)) {
    if (!extension.length) req.reject(400, 'Property "extension" is empty')
  } else {
    const length = typeof extension === 'string' ? extension.length : Object.keys(extension).length
    if (!length) req.reject(400, 'Property "extension" is malformed')
  }
}

const _mergeCSN = function (extension, merged) {
  if (!merged) merged = { extensions: [], definitions: {} }
  if (extension.definitions) Object.assign (merged.definitions, extension.definitions)
  if (extension.extensions) merged.extensions.push (...extension.extensions)

  return merged
}

const _toJson = function (content) {
  const json = {}
  const splitted = content.split('\n')
  splitted.forEach(s => {
    const parts = s.split('=')
    if (parts.length === 2) {
      json[parts[0].trim()] = parts[1].trim()
    }
  })

  return json
}

const _getFiles = function (resources, req) {
  let bundles = {}
  let fromJson = false
  const csvs = {}
  if (resources && Array.isArray(resources) && resources.length) {
    resources.forEach(file => {
      let key = file.name.match(/i18n_*(.*)\.properties/)
      if (key) {
        if (fromJson) req.reject(422, `Mixed i18n file types not supported: i18n.json and ${file.name}`)
        bundles[key[1]] = _toJson(file.content)
        return
      }
      key = file.name.match(/i18n.json/)
      if (key) {
        if (Object.entries(bundles).length) req.reject(422, `Mixed i18n file types not supported: i18n.json and .properties`)
        try {
          bundles = JSON.parse(file.content)
          fromJson = true
        } catch (e) {
          req.reject(422, 'Invalid json content in i18n.json')
        }
        return
      }
      key = file.name.match(/.*\.csv/)
      if (key) {
        csvs[file.name] = file.content
      }
    })
  }

  return { bundles, csvs }
}

const _addExtension = async function (extCsn, tag, bundles, csvs, tenant, activate, req) {

  if (tenant) cds.context = { tenant }
  const ID = cds.utils.uuid()
  await cds.db.run(
    INSERT.into('cds.xt.Extensions').entries([{
      ID,
      tag,
      i18n: bundles ? JSON.stringify(bundles) : null,
      csn: JSON.stringify(extCsn),
      activated: activate }])
  )

  LOG.info(`validating extension '${tag}' ...`)
  const { 'cds.xt.ModelProviderService': mps } = cds.services
  try {
    const csn = await mps.getCsn(tenant, ['*'])

    const njCsn = cds.compile.for.nodejs(csn)
    LOG.info(`activating extension to '${activate}' ...`)
    if (activate === 'propertyBag' && extCsn.extensions)
      extCsn.extensions.forEach(async ext => await handleDefaults(ext, njCsn))
    if (activate === 'database') await activateExt(ID, tag, tenant, csvs)
  } catch (err) {
    req.reject(400, getCompilerError(err.messages))
  }
}

const add = async function (req) {
  _validateInput(req, req.data.extension)

  let { extension, tag, activate } = req.data
  const tenant = (req.user.is('internal-user') && req.data.tenant) || req.tenant || '' // revisit magic
  if (tenant) cds.context = { tenant }

  if (!activate) activate = 'database'
  if (!tag) tag = null

  const extCsn = typeof extension === 'string'
    ? _isCSN(extension) ? JSON.parse(extension) : cds.parse.cdl(extension)
    : extension
  if (extCsn.requires) delete extCsn.requires

  await _addExtension(extCsn, tag, null, null, tenant, activate, req)
}

const setExtension = async function (req) {
  let { extension, tag, resources, activate } = req.data
  const tenant = (req.user.is('internal-user') && req.data.tenant) || req.tenant || '' // revisit magic
  return set_(req, { extension, tag, resources, activate, tenant })
}

const set_ = async function (req, { extension, tag, resources, activate, tenant }) {
  _validateInput(req, extension)

  if (tenant) cds.context = { tenant }

  if (!activate) activate = 'database'
  if (!tag) tag = null

  let extCsn
  for (let ext of extension) {
    if (typeof ext === 'string') {
      if (!ext.length) req.reject(400, 'Missing extension')
      if (_isCSN(ext)) extCsn = _mergeCSN(JSON.parse(ext), extCsn)
      else try { extCsn = _mergeCSN(cds.parse.cdl(ext), extCsn) } catch (e) {
        if (e.code === 'ERR_CDS_COMPILATION_FAILURE') req.reject(422, e.message)
        else throw e
      }
    } else {
      if (!Object.keys(ext).length) req.reject(400, 'Missing extension')
      extCsn = _mergeCSN(ext, extCsn)
    }
  }
  if (extCsn.requires) delete extCsn.requires

  const { bundles, csvs } = _getFiles(resources, req)
  if (tag) await DELETE.from('cds.xt.Extensions').where({ tag })
  await _addExtension(extCsn, tag, bundles, csvs, tenant, activate, req)
}

const promote = async function (req) {
  let { tag, activate } = req.data
  if (!req.user.is('internal-user') && req.data.tenant && req.data.tenant !== req.tenant)
    req.reject(403, `No permission to promote extensions by tenants other than ${req.tenant}`)
    const tenant = (req.user.is('internal-user') && req.data.tenant) || req.tenant || ''
  if (tenant) cds.context = { tenant }

  if (!activate) activate = 'database'
  if (!tag) tag = null
  if (activate !== 'database') req.reject(400, 'Promote to propertyBag is not supported')

  if (tenant) cds.context = { tenant }
  await activateExt(null, tag, tenant)
}

module.exports = { add, set_, promote, setExtension }
