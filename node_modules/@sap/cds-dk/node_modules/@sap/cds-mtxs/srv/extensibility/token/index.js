const cds = require('@sap/cds/lib');
const { getAuthProvider } = require('./authProvider/AuthProviderFactory');

const LOG = cds.log('mtx');
const DEBUG = cds.debug('req|mtx');
const axiosInstance = require('axios').create();
axiosInstance.interceptors.response.use(response => response, require('../../../lib/pruneAxiosErrors'));

async function parseBody(request) {
    return new Promise((resolve, reject) => {
        const chunks = [];
        request.on('data', chunk => chunks.push(chunk));
        request.on('end', () => {
            try {
                const body = Buffer.concat(chunks).toString();
                request.body = Object.fromEntries(new URLSearchParams(body).entries());
                resolve(request.body);
            } catch (error) {
                reject(error);
            }
        });
    });
}

module.exports = async function token(request, response) {
    if (request.method === 'HEAD') {
        return response.status(204).send();
    }

    LOG.info(`Getting auth token`);

    const { credentials } = cds.env.requires.auth;
    const query = request.method === 'POST'
        ? await parseBody(request)
        : request.query;

    let authProvider;
    try {
        authProvider = getAuthProvider(credentials, query);
    } catch (error) {
        LOG.error(error);
        return response.status(500).send(error);
    }

    try {
        const { data } = await axiosInstance.post(
            authProvider.authUrl,
            authProvider.postData,
            {
                ...authProvider.clientAuth,
                timeout: 1e4 // ms
            }
        );
        response.status(200).send(data);

    } catch (axError) {
        const details = (axError.response?.status === 401 ? `Client authentication: ${authProvider.clientAuthToLog()}. ` : '') +
            `POST data: '${authProvider.postDataToLog()}'. `;
        const passcodeUrl = new URL(authProvider.authUrl);
        passcodeUrl.pathname = '/passcode';

        const toLog = `Authentication failed: ${axError.message} ${details}Passcode URL: ${passcodeUrl}`;
        const toSend = {
            error: 'Authentication failed',
            error_description: axError.message,
            passcode_url: passcodeUrl.toString()
        };
        const status = axError.status ?? 500;

        LOG.error(toLog);
        DEBUG && LOG.error(axError);
        response.status(status).send(toSend);
    }
}
