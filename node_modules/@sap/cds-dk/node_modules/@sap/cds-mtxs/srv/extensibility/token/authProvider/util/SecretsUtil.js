module.exports = class SecretsUtil {
    static assertEqualNonSecret(name, actual, expected) {
        if (SecretsUtil.prune(actual) !== SecretsUtil.prune(expected)) {
            throw new Error(`invalid ${name}: '${actual}'`);
        }
    }

    static assertEqualSecret(name, actual, expected) {
        if (SecretsUtil.prune(actual) !== SecretsUtil.prune(expected)) {
            throw new Error(`invalid ${name}: '${expected.includes('-----') ? SecretsUtil.snipCert(actual) : SecretsUtil.snipValue(actual)}'`);
        }
    }

    static assertDefined(name, actual) {
        if (!actual) {
            throw new Error(`invalid ${name}: '${actual}'`);
        }
    }

    static prune(value) {
        return typeof value === 'string' ? value.replace(/\n|-----(BEGIN|END)[\w ]+-----/g, '').trim() : value;
    }

    static snipValue(secretValue) {
        const exposeLen = 2;
        if (!secretValue) {
            return secretValue;
        }
        secretValue = SecretsUtil.prune(secretValue);
        return secretValue.slice(0, exposeLen) + '…' + secretValue.slice(-exposeLen);
    }

    static snipCert(secretCert) {
        const exposeLen = 4;
        if (!secretCert) {
            return secretCert;
        }
        secretCert = SecretsUtil.prune(secretCert);
        return secretCert.slice(0, exposeLen) + '…' + secretCert.slice(-exposeLen);
    }
};
