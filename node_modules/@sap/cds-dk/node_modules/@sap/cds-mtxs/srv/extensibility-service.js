const cds = require('@sap/cds/lib')

const main = require('./config')
const addExtension = require('./extensibility/addExtension')
const { add, promote, setExtension } = require('./extensibility/add')
const { push, pull } = require('./extensibility/push')
const { readExtension, updateExtension, deleteExtension } = require('./extensibility/crud')
const token = require('./extensibility/token')
const { transformExtendedFieldsCREATE, transformExtendedFieldsUPDATE } = require('./extensibility/handler/transformWRITE')
const { transformExtendedFieldsREAD } = require('./extensibility/handler/transformREAD')
const { transformExtendedFieldsRESULT } = require('./extensibility/handler/transformRESULT')
const { addCodeAnnotations } = require('./extensibility/code-extensibility/addCodeAnnotLocal')

const { getMigratedProjects } = require('../lib/migration/migration')

module.exports = class ExtensibilityService extends cds.ApplicationService {

  async init() {
    this.on('addExtension', addExtension)
    this.on('add', add)
    this.on('promote', promote)
    this.on('push', push)
    this.on('pull', pull)

    this.on('set', setExtension)
    this.on('UPDATE', 'Extensions', updateExtension)
    this.on('DELETE', 'Extensions', deleteExtension)
    this.on('READ', 'Extensions', readExtension)

    this.on('getMigratedProjects', (req) => {
      let { tagRule, defaultTag } = req.data

      // REVIEW check if access for arbitrary tenants needed
      const tenant = req.tenant
      if (!tenant) req.reject(401, 'User not assigned to any tenant')

      return getMigratedProjects(req, tagRule || undefined, defaultTag || undefined, tenant)
    })

    const _in_prod = process.env.NODE_ENV === 'production'
    if (main.requires.extensibility?.code && !_in_prod && !main.requires.multitenancy) {
      const findings = await addCodeAnnotations()
      if (findings?.length > 0) {
        let message = `Code validation failed with ${findings.length} finding(s):\n\n`
        message += findings.join('\n')
        throw new Error(message)
      }
    }

    cds.on('served', () => {
      if (cds.app) {
        cds.app.post('/-/cds/login/token', token)
        cds.app.get('/-/cds/login/token', token)
      }
    })

    const { 'cds.xt.ModelProviderService': mps } = cds.services
    if (!mps?._in_sidecar && cds.db?.model)
      cds.db
        .before('CREATE', transformExtendedFieldsCREATE)
        .before('UPDATE', transformExtendedFieldsUPDATE)
        .before('READ', transformExtendedFieldsREAD)
        .after('READ', transformExtendedFieldsRESULT)

    return super.init()
  }
}
