using { cds.xt.Extensions } from '../db/extensions';

@protocol: 'rest'
@(requires : ['cds.UIFlexDeveloper', 'cds.ExtensionDeveloper', 'internal-user'])
service cds.xt.ExtensibilityService @(path:'/-/cds/extensibility', impl:'@sap/cds-mtxs/srv/extensibility-service.js') {

  type ActivationLevel : cds.xt.Extensions:activated;
  type CSN : String; // REVISIT: should reuse cds.xt.CSN
  type CSN_OR_CDL: String;

  type FILE {
    name: String;
    content: LargeString;
  }

  // UIFLEX API
   @(requires : ['cds.UIFlexDeveloper', 'cds.ExtensionDeveloper'])
  action addExtension(extensions : array of CSN);  // REVISIT: change to array of CSN extensions

  // Experimental API
  // deprecated
  @(requires : ['cds.ExtensionDeveloper', 'internal-user'])
  action add(
    extension  : CSN_OR_CDL,
    tag        : cds.xt.Extensions:tag, // optional
    activate   : ActivationLevel, // default #database
    tenant     : String // optional, for internal-user only
  );

  // always update tags, allow empty extensions
  @(requires : ['cds.ExtensionDeveloper', 'internal-user'])
  action set(
    extension  : array of CSN_OR_CDL,
    resources  : array of FILE,
    tag        : cds.xt.Extensions:tag, // optional
    activate   : ActivationLevel, // default #database
    tenant     : String // optional, for internal-user only
  );

  // Experimental API
  // use as production flag
  @(requires : ['cds.ExtensionDeveloper', 'internal-user'])
  action promote(
    tag       : cds.xt.Extensions:tag, // optional
    activate  : ActivationLevel, // default #database
    tenant    : String // optional, for internal-user only
  );

    /**
   * READ Extensions -> { ID, csn, timestamp } -> where csn is not null
   * UPSERT Extension { ID, csn } -> PUT -> UPDATE -> UPSERT?
   * DELETE Extension (ID) -> UPSERT into Extensions { ID:'tombstone' }
   */
  @requires : ['cds.ExtensionDeveloper', 'internal-user']
  @cds.persistence.skip
  entity Extensions {
    key ID : String;
    // title : String;
    // descr : String;
    @open csn : array of String; // But we are nice to them and allow CDL as well, as input only(!!!)
    i18n: array of FILE;
    timestamp : Timestamp @cds.on.insert:$now @cds.on.update:$now;
  }

}

/*
 * PRIVATE APIs!!!
 * @private
 */
// TODO: async jobs
extend service cds.xt.ExtensibilityService with @private {

  type TAR : LargeBinary;


  @(requires : ['cds.ExtensionDeveloper'])
  @private action pull() returns TAR;

  @(requires : ['cds.ExtensionDeveloper'])
  @private action push (
    extension : LargeBinary, // REVISIT: Using TAR here leads to a strange type check failure
    tag       : cds.xt.Extensions:tag,
    tenant     : String // optional, for internal-user only
  );
}

// access to legacy content
extend service cds.xt.ExtensibilityService {

  @(requires : ['cds.ExtensionDeveloper'])
  @private action getMigratedProjects(
    tagRule: String,  // optional
    defaultTag: String, // optional
    tenant: String // optional
  ) returns LargeBinary;

  //action rename(oldTag: String, newTag: String);
}